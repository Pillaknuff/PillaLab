#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Jan 04, 2022 12:42:20 PM CET  platform: Windows NT
#    Jan 04, 2022 05:17:46 PM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import h5py
import time
import numpy as np
import LogfileViewer
from matplotlib import pyplot as plt
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
import matplotlib.animation as animation
import datetime
import matplotlib.dates as mdates


def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = LogfileViewer.Toplevel1(_top1)
    root.after(1000,Fill_Canvas)
    root.mainloop()

def Fill_Canvas():
    global fig,subplot,t,canvas,ani, toolbar

    #fig = Figure(figsize=(5, 4), dpi=100)
    fig = plt.figure(num=1,figsize=(5, 4), dpi=100)
    #fig = plt.figure()
    t = np.arange(0, 3, .01)
    subplot = fig.add_subplot(111)
    subplot.plot(t, 2 * np.sin(2 * np.pi * t))


    #subplot.set_yscale('lin')
    
    #subplot = plt.plot(t, 2 * np.sin(2 * np.pi * t))
    #fig.plot(t, 2 * np.sin(2 * np.pi * t))
    canvas = FigureCanvasTkAgg(fig, master=_w1.GraphicsBox)  # A tk.DrawingArea.
    
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    toolbar = NavigationToolbar2Tk(canvas, _w1.ToolbarBox)
    toolbar.update()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()

def DisplaySelected(*args):
    print("displaying")

    subplot.clear()
    subplot.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M  /%d/%m/%Y'))
    subplot.xaxis.set_major_locator(mdates.HourLocator(interval=6))

    for key in chkboxdict.keys():
        chkbox = chkboxdict[key]
        if "selected" in chkbox.get() or "alternate" in chkbox.get():
            data = groupdata[key]
            t = data[1]
            t = [datetime.datetime.fromtimestamp(j) for j in t]
            t = [mdates.date2num(j) for j in t] 
            subplot.plot_date(t, data[0],label=key)

    subplot.autoscale(enable=True,axis='y',tight=True)
    subplot.autoscale(enable=True,axis='x',tight=True)
    subplot.legend(loc=0, frameon=False)
    canvas.draw()
    

def open_Loader(*args):
    global hf, groups
    try:
        from tkinter import filedialog
    except:
        import tkFileDialog as filedialog
    file_path = filedialog.askopenfilename()
    hf = h5py.File(file_path, 'r')

    groups = ["all_groups",]
    for key in hf.keys():
        groups.append(key)
    print("data loaded with groups: "+ str(groups))
    _w1.Groupselector.configure(value=groups)

def ChangeGroup(*args):
    global selectedgroup
    print('LogfileViewer_support.ChangeGroup')
    selectedgroup = _w1.Groupselector.get()
    print("selected: " + selectedgroup)
    global groupkeys
    global groupdata
    global eventtext


    if "growthlog" in selectedgroup:
        groupkeys = []
        groupdata = {}

        for key in hf[selectedgroup].keys():
            if not "timestamp" in key or "Eventlog" in key:
                groupkeys.append(key)
        
        print(groupkeys)
        for key in groupkeys:
            data = hf[selectedgroup][key].value
            dtime = hf[selectedgroup][key + "_timestamp"].value

            groupdata[key] = [data,dtime]

        myEventlog = hf[selectedgroup]["EventLog"].value
        myEventtime = hf[selectedgroup]["EventLog_timestamp"].value

        eventtext = ""
        for stime, entry in zip(myEventtime,myEventlog):
            eventtext += time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(stime)) + ": " + str(entry) + "\n"
        
        _w1.Eventdisplay.delete('1.0', tk.END)
        _w1.Eventdisplay.insert('1.0',eventtext)
    elif "all_groups" in selectedgroup:
        groupkeys = []
        groupdata = {}
        eventtext = ""

        for selectedgroup in hf.keys():
            for key in hf[selectedgroup].keys():
                if (not (("timestamp" in key) or ( "EventLog" in key))) and (not(key in groupkeys)):
                    groupkeys.append(key)
            
            for key in groupkeys:
                data = hf[selectedgroup][key].value
                dtime = hf[selectedgroup][key + "_timestamp"].value

                if not key in groupdata.keys():
                    groupdata[key] = [data,dtime]
                else:

                    oldgroupdata = groupdata[key].copy()
                    groupdata[key] = [np.concatenate((oldgroupdata[0],data)),np.concatenate((oldgroupdata[1],dtime))]

            myEventlog = hf[selectedgroup]["EventLog"].value
            myEventtime = hf[selectedgroup]["EventLog_timestamp"].value

            
            for stime, entry in zip(myEventtime,myEventlog):
                eventtext += time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(stime)) + ": " + str(entry) + "\n"
            
    _w1.Eventdisplay.delete('1.0', tk.END)
    _w1.Eventdisplay.insert('1.0',eventtext)

    FillWithCheckboxes(groupkeys)

def FillWithCheckboxes(textlist):
    innerframe = _w1.DataSetSelector_f
    global chkboxdict
    chkboxdict = {}

    for widget in innerframe.winfo_children(): #empty first, if already filled
        widget.destroy()

    for entry in textlist:
        chkboxdict[entry] = aCheckBoxWidget(entry,innerframe)
        #chkboxdict[entry].grid(sticky='w')

class aCheckBoxWidget:
    def __init__(self,txt,master):
        self.text = txt
        self.field = ttk.Checkbutton(master)
        self.field.pack(fill='both')
        self.field.configure(text=txt)
    def get(self):
        return self.field.state()


if __name__ == '__main__':
    LogfileViewer.start_up()

'''
for key in hf.keys():
    print(key)
    print(hf[key])
    print(hf[key].keys())
    for akey in hf[key].keys():
        print(hf[key][akey].value)
        
'''





