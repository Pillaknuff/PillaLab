#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 23, 2020 11:49:45 PM CEST  platform: Windows NT
#    Sep 24, 2020 02:16:09 AM CEST  platform: Windows NT

import sys
import threading
import h5py
import time
import numpy as np
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
try:
    from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk
except:
    print("downgrading to python 2 solution and looking vorwurfsvoll!")
    from matplotlib.backends.backend_tkagg import NavigationToolbar2TkAgg as NavigationToolbar2Tk
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
from matplotlib import pyplot as plt
import matplotlib.animation as animation

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True



# Predefinitions***************************************************************
Filefolder = "C:\\ControlPC\\Monitor Data\\XAS\\XAS_PyTool\\"
GroupMask = "Scan_"
FileOpen = False
ScanRunning = False
running = True
treedict = {}
Stopflag = False

#PyTangoAdresses
adress_Sample = "hasppa3control:10000/asphere/test/keithley6517a"
adress_I0 = "haspp04exp1:10000/p04/keithley6517a/exp1.01"
adress_Undu = "haspp04exp2:10000/p04/plcundulator/1"
adress_Mono = "haspp04exp1:10000/p04/monop04/exp1.01"

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    embeddGraphics()
    IniReadings()

    # ChronThread = threading.Thread(target=chronJobs)
    # ChronThread.start()

#*********** GUI background functions ***************************
def UpdateTreeList():
    if FileOpen:
        GroupTree = h5file.keys()
        print(GroupTree)
        FillInTree(GroupTree)


def FillInTree(Tree):
    global treedict
    treedict = {}
    master = w.Filedisplayer_f
    for widget in master.winfo_children(): #empty first, if already filled
        widget.destroy()

    # for key in treedict.keys():
    #     if not key in Tree:
    #         treedict[key].Frame1.destroy()

    created = False
    for key in Tree:
        #if not key in treedict.keys():
        key = str(key)
        print(key)
        treedict[key] = entryLine(master,key)
        treedict[key].Frame1.grid(sticky='w')
        created = True

    if created:
        treedict[key].Frame1.wait_visibility()
        bbox = master.bbox()
        w.Filedisplayer.configure(scrollregion=bbox)

    print("finishing")

def updateList():
    print('XASTool_support.updateList')
    sys.stdout.flush()
    UpdateTreeList()

def display():                                                                  # Display selected Data
    subplot.clear()

    for key in treedict.keys():
        
        widget = treedict[key]
        if widget.chkboxval.get() == "1":
            print(key)
            group = h5file[key]

            en = group["E_mono"].value
            entime = group["E_mono_t"].value
            Isample = group["I_sample"].value
            Isampletime = group["I_sample_t"].value
            Imesh = group["I_mesh"].value
            Imeshtime = group["I_mesh_t"].value

            entimeinp = np.linspace(entime.min(),entime.max(),1000)
            eninp = np.interp(entimeinp,entime,en)
            Isampleinp = np.interp(entimeinp,Isampletime,Isample)
            Imeshinp = np.interp(entimeinp,Imeshtime,Imesh)



            xas = Isampleinp#/Imeshinp
            en = eninp

            #print(xas)
            #print(en)

            subplot.plot(en,xas,'.',label=key)
    subplot.legend(loc=0, frameon=False)
    canvas.draw()

def openFile():                                                                 # open HDF5 file
    global FileOpen, h5file
    if FileOpen:
        try:
            h5file.close()
        except Exception as e:
            print("error closing: " + str(e))

    filename = w.Filename.get()
    if filename == "":
        filename = "ScanFile"

    fullpath = Filefolder + filename + ".h5"

    
    try:
        h5file = h5py.File(fullpath, 'a')
        FileOpen = True
    except Exception as e:
        FileOpen = False
        print("error while opening hdf5: " + str(e))
    
    return FileOpen

#****************** Controls ***************************
def changeToCM():
    print('not Implemented yet!')
    sys.stdout.flush()

def changeToCP():
    print('not Implemented yet!')
    sys.stdout.flush()




# *****************************Active scanning functions*****************************************
def IniReadings(buf_max=10000):
    import TangoMonitor2 as tm
    

    global SampleReader, I0Reader, MonoReader, UnduReader

    # avalilable adresses
    # adress_Sample = "haspa3control:10000/asphere/test/keithley6517a"
    # adress_I0 = "haspp04exp1:10000/p04/keithley6517a/exp1.01"
    # adress_Undu = "haspp04exp2:10000/p04/pkundulator"
    # adress_Mono = "haspp04exp1:10000/p04/monop04"

    print("Ini Sample Keithley")
    SampleReader = tm.TangoMonitor(adress_Sample,'Current',PollingPeriod=100,buf_max=buf_max)
    print("Ini I0 Keithley")
    I0Reader = tm.TangoMonitor(adress_I0,'Current',PollingPeriod=100,buf_max=buf_max)
    print("Ini Undulator")
    UnduReader = tm.TangoMonitor(adress_Undu,'CurrentGap',PollingPeriod=500,buf_max=buf_max)
    print("Ini Mono")
    MonoReader = tm.TangoMonitor(adress_Mono,'Position',PollingPeriod=500,buf_max=buf_max)

    print(SampleReader.FetchData(clear_buffer=True)) # read to clear buffer
    print(I0Reader.FetchData(clear_buffer=True)) # read to clear buffer
    print(UnduReader.FetchData(clear_buffer=True)) # read to clear buffer
    print(MonoReader.FetchData(clear_buffer=True)) # read to clear buffer



def runScan():
    print('Starting data aquisition, press stop, when scan is finished')
    sys.stdout.flush()
    start,end,speed,valid = getScanParams()

    if not FileOpen:
        openFile()

    if (valid and FileOpen) and not ScanRunning:
        mythread = threading.Thread(target=XASScan, args = (start,end,speed))
        mythread.start()

def runpmmpScan():
    print('not implemented')
    sys.stdout.flush()

def stopScan():
    print('Data Aquisition terminated!')
    sys.stdout.flush()
    global Stopflag
    Stopflag = True

def getScanParams():
    start = w.Estart.get()
    end = w.Eend.get()
    speed = w.Speed.get()
    try:
        start = float(start)
        end = float(end)
        speed = float(speed)
        valid = True
    except:
        start = 0
        end = 0
        speed = 0
        valid = False
    return start,end,speed,valid



def destroy_window():
    # Function which closes the window.
    global top_level
    running = False
    if FileOpen:
        h5file.close()
        
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import XASTool
    XASTool.vp_start_gui()

#*****************Scanning routines********************************

def XASScan(start,end,speed):
    global ScanRunning
    global SampleReader, I0Reader, MonoReader

    ScanRunning = True
    
    

    ## uncomment, if you want to use a dummy mode
    # energy = np.linspace(start,end,1000)
    # energytime = np.linspace(1,5,1000)
    # Isample = np.random.rand(1010)
    # Isampletime = np.linspace(1,5,1010)
    # Imesh = np.random.rand(900)
    # Imeshtime = np.linspace(1,5,900)


    # set undulator and mono to startvalues*********************************************************************************************

    # start reading values****************************************************************************************************************
                                                             # restart all devices, clear buffer, configure scan specifics

    # start scan with Mono and Undulator*************************************************************************************************

    # check for status of scan and read data, when finished******************************************************************************

    

    # Aquire base data to get timestamps for the cutoff
    SampleReader.FetchData(clear_buffer=False)
    MonoReader.FetchData(clear_buffer=False)
    I0Reader.FetchData(clear_buffer=False)
    UnduReader.FetchData(clear_buffer=False)

    Isampletime_start = SampleReader.buf_timestamp.copy()
    energytime_start = MonoReader.buf_timestamp.copy()
    Imeshtime_start = I0Reader.buf_timestamp.copy()
    eUndulatortime_start = UnduReader.buf_timestamp.copy()

    #************ Start waiting loop until stop button is pressed*****************
    global Stopflag
    Stopflag = False
    while not Stopflag:
        time.sleep(1)



    SampleReader.FetchData(clear_buffer=False)
    MonoReader.FetchData(clear_buffer=False)
    I0Reader.FetchData(clear_buffer=False)
    UnduReader.FetchData(clear_buffer=False)

    Isample = SampleReader.buffer.copy()
    Isampletime = SampleReader.buf_timestamp.copy()


    energy = MonoReader.buffer.copy()
    energytime = MonoReader.buf_timestamp.copy()

    Imesh = I0Reader.buffer.copy()
    Imeshtime = I0Reader.buf_timestamp.copy()

    eUndulator = UnduReader.buffer.copy()
    eUndulatortime = UnduReader.buf_timestamp.copy()

    print("Scan finished, saving data")
    # print(energy)
    # print(energytime)
    # print(Imesh)
    # print(Isample)



    SaveData(energy,energytime,Isample,Isampletime,Imesh,Imeshtime,eUndulator,eUndulatortime, Isampletime_start, energytime_start, Imeshtime_start, eUndulatortime_start)
    print("saved")
    ScanRunning = False



def SaveData(energy,energytime,Isample,Isampletime,Imesh,Imeshtime,eUndulator,eUndulatortime,Isampletime_start, energytime_start, Imeshtime_start, eUndulatortime_start):


    #Isampleindex = Isampletime.index(Isampletime_start[len(Isampletime_start)-1])
    Isampleindex = np.where(Isampletime==Isampletime_start[len(Isampletime_start)-1])[0][0]
    #energyindex = Isampletime.index(energytime_start[len(energytime_start)-1])
    energyindex = np.where(energytime == energytime_start[len(energytime_start)-1])[0][0]
    #Imeshindex = Isampletime.index(Imeshtime_start[len(Imeshtime_start)-1])
    Imeshindex = np.where(Imeshtime == Imeshtime_start[len(Imeshtime_start)-1])[0][0]
    #eUnduIndex = Isampletime.index(eUndulatortime_start[len(eUndulatortime_start)-1])
    eUnduIndex = np.where(eUndulatortime == eUndulatortime_start[len(eUndulatortime_start)-1])[0][0]

    i=0
    while True: # create group in loop
        groupname = GroupMask + str(i) 
        try:
            g1 = h5file.create_group(groupname)
            break
        except:
            i+=1

    energyset = g1.create_dataset("E_mono", data=energy[energyindex:])
    energytimeset = g1.create_dataset("E_mono_t", data=energytime[energyindex:])
    Isampleset = g1.create_dataset("I_sample", data=Isample[Isampleindex:],)
    Isampletimeset = g1.create_dataset("I_sample_t", data=Isampletime[Isampleindex:],)
    Imeshset = g1.create_dataset("I_mesh", data=Imesh[Imeshindex:],)
    Imeshtimeset = g1.create_dataset("I_mesh_t", data=Imeshtime[Imeshindex:],)
    Imeshset = g1.create_dataset("Gap_Undu", data=eUndulator[eUnduIndex:],)
    Imeshtimeset = g1.create_dataset("Gap_Undu_t", data=eUndulatortime[eUnduIndex:],)

#*****************graphic windows************************


def embeddGraphics():
    global fig,subplot,t,canvas,ani, toolbar

    #fig = Figure(figsize=(5, 4), dpi=100)
    fig = plt.figure(num=1,figsize=(5, 4), dpi=100)
    #fig = plt.figure()
    t = np.arange(0, 3, .01)
    subplot = fig.add_subplot(111)
    subplot.plot(t, 2 * np.sin(2 * np.pi * t),".")


    
    #subplot = plt.plot(t, 2 * np.sin(2 * np.pi * t))
    #fig.plot(t, 2 * np.sin(2 * np.pi * t))
    canvas = FigureCanvasTkAgg(fig, master=w.Displayframe)  # A tk.DrawingArea.
    
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    toolbar = NavigationToolbar2Tk(canvas, w.Toolframe)
    toolbar.update()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()
    #canvas.mpl_connect("key_press_event", on_key_press)
    #ani = animation.FuncAnimation(fig, updateGraphics, interval=(theController.settings["pressures.readrate"]*1000))

#****************entry class*********************************
class entryLine:
    def __init__(self,master,name):
        self.chkboxval = tk.StringVar()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()

        self.Frame1 = tk.Frame(master,height=30,width=360)
        #self.Frame1.place(relx=0.2, rely=0.178, relheight=0.078, relwidth=0.375)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")

        self.Label = tk.Label(self.Frame1)
        self.Label.place(relx=0.044, rely=0.286, height=19, width=184)
        self.Label.configure(background="#d9d9d9")
        self.Label.configure(disabledforeground="#a3a3a3")
        self.Label.configure(foreground="#000000")
        self.Label.configure(text=name)

        self.style.map('TCheckbutton',background=[('selected', _bgcolor), ('active', _ana2color)])
        self.Checked = ttk.Checkbutton(self.Frame1)
        self.Checked.place(relx=0.889, rely=0.286, relwidth=0.093, relheight=0.0, height=21)
        self.Checked.configure(variable=self.chkboxval)
        self.Checked.configure(takefocus="")
        self.Checked.configure(cursor="fleur")





