#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Jul 20, 2020 12:26:58 AM CEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Cell_control2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Cell_control2_support.set_Tk_var()
    top = Toplevel1 (root)
    Cell_control2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Cell_control2_support.set_Tk_var()
    top = Toplevel1 (w)
    Cell_control2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("598x439+650+159")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.117, rely=0.023, height=31, width=75)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Shutters''')

        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(relx=0.401, rely=0.023, height=31, width=135)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Segoe UI} -size 14")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Temperatures''')

        self.S1_open = tk.Button(top)
        self.S1_open.place(relx=0.117, rely=0.137, height=34, width=40)
        self.S1_open.configure(activebackground="#ececec")
        self.S1_open.configure(activeforeground="#000000")
        self.S1_open.configure(background="#5f5f5f")
        self.S1_open.configure(command=Cell_control2_support.OpenS1)
        self.S1_open.configure(disabledforeground="#a3a3a3")
        self.S1_open.configure(foreground="#000000")
        self.S1_open.configure(highlightbackground="#d9d9d9")
        self.S1_open.configure(highlightcolor="black")
        self.S1_open.configure(pady="0")
        self.S1_open.configure(text='''Open''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.S1_open, tooltip_font, '''used to indicate to program, when shutters are open or closed''', delay=0.5)

        self.S1_close = tk.Button(top)
        self.S1_close.place(relx=0.201, rely=0.137, height=34, width=40)
        self.S1_close.configure(activebackground="#ececec")
        self.S1_close.configure(activeforeground="#000000")
        self.S1_close.configure(background="#5f5f5f")
        self.S1_close.configure(command=Cell_control2_support.CloseS1)
        self.S1_close.configure(disabledforeground="#a3a3a3")
        self.S1_close.configure(foreground="#000000")
        self.S1_close.configure(highlightbackground="#d9d9d9")
        self.S1_close.configure(highlightcolor="black")
        self.S1_close.configure(pady="0")
        self.S1_close.configure(text='''Close''')

        self.S2_open = tk.Button(top)
        self.S2_open.place(relx=0.117, rely=0.273, height=34, width=40)
        self.S2_open.configure(activebackground="#ececec")
        self.S2_open.configure(activeforeground="#000000")
        self.S2_open.configure(background="#5f5f5f")
        self.S2_open.configure(command=Cell_control2_support.OpenS2)
        self.S2_open.configure(disabledforeground="#a3a3a3")
        self.S2_open.configure(foreground="#000000")
        self.S2_open.configure(highlightbackground="#d9d9d9")
        self.S2_open.configure(highlightcolor="black")
        self.S2_open.configure(pady="0")
        self.S2_open.configure(text='''Open''')

        self.S2_close = tk.Button(top)
        self.S2_close.place(relx=0.201, rely=0.273, height=34, width=40)
        self.S2_close.configure(activebackground="#ececec")
        self.S2_close.configure(activeforeground="#000000")
        self.S2_close.configure(background="#5f5f5f")
        self.S2_close.configure(command=Cell_control2_support.CloseS2)
        self.S2_close.configure(disabledforeground="#a3a3a3")
        self.S2_close.configure(foreground="#000000")
        self.S2_close.configure(highlightbackground="#d9d9d9")
        self.S2_close.configure(highlightcolor="black")
        self.S2_close.configure(pady="0")
        self.S2_close.configure(text='''Close''')

        self.S2_set = tk.Button(top)
        self.S2_set.place(relx=0.217, rely=0.364, height=24, width=30)
        self.S2_set.configure(activebackground="#ececec")
        self.S2_set.configure(activeforeground="#000000")
        self.S2_set.configure(background="#5f5f5f")
        self.S2_set.configure(command=Cell_control2_support.shutter2Pos4)
        self.S2_set.configure(disabledforeground="#a3a3a3")
        self.S2_set.configure(foreground="#000000")
        self.S2_set.configure(highlightbackground="#d9d9d9")
        self.S2_set.configure(highlightcolor="black")
        self.S2_set.configure(pady="0")
        self.S2_set.configure(text='''set''')

        self.T1_read = tk.Text(top)
        self.T1_read.place(relx=0.452, rely=0.159, relheight=0.052
                , relwidth=0.107)
        self.T1_read.configure(background="white")
        self.T1_read.configure(font="TkTextFont")
        self.T1_read.configure(foreground="black")
        self.T1_read.configure(highlightbackground="#d9d9d9")
        self.T1_read.configure(highlightcolor="black")
        self.T1_read.configure(insertbackground="black")
        self.T1_read.configure(selectbackground="#c4c4c4")
        self.T1_read.configure(selectforeground="black")
        self.T1_read.configure(wrap="word")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.435, rely=0.091, height=20, width=39)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''T read''')

        self.Label2_7 = tk.Label(top)
        self.Label2_7.place(relx=0.569, rely=0.091, height=20, width=39)
        self.Label2_7.configure(activebackground="#f9f9f9")
        self.Label2_7.configure(activeforeground="black")
        self.Label2_7.configure(background="#d9d9d9")
        self.Label2_7.configure(disabledforeground="#a3a3a3")
        self.Label2_7.configure(foreground="#000000")
        self.Label2_7.configure(highlightbackground="#d9d9d9")
        self.Label2_7.configure(highlightcolor="black")
        self.Label2_7.configure(text='''T set''')

        self.T1_set = tk.Text(top)
        self.T1_set.place(relx=0.585, rely=0.159, relheight=0.052
                , relwidth=0.107)
        self.T1_set.configure(background="white")
        self.T1_set.configure(font="TkTextFont")
        self.T1_set.configure(foreground="black")
        self.T1_set.configure(highlightbackground="#d9d9d9")
        self.T1_set.configure(highlightcolor="black")
        self.T1_set.configure(insertbackground="black")
        self.T1_set.configure(selectbackground="#c4c4c4")
        self.T1_set.configure(selectforeground="black")
        self.T1_set.configure(wrap="word")

        self.SetT1 = tk.Button(top)
        self.SetT1.place(relx=0.719, rely=0.159, height=24, width=40)
        self.SetT1.configure(activebackground="#ececec")
        self.SetT1.configure(activeforeground="#000000")
        self.SetT1.configure(background="#5f5f5f")
        self.SetT1.configure(command=Cell_control2_support.SetT1)
        self.SetT1.configure(disabledforeground="#a3a3a3")
        self.SetT1.configure(foreground="#000000")
        self.SetT1.configure(highlightbackground="#d9d9d9")
        self.SetT1.configure(highlightcolor="black")
        self.SetT1.configure(pady="0")
        self.SetT1.configure(text='''set''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.SetT1, tooltip_font, '''immediately set temperature''', delay=0.5)

        self.T2_read = tk.Text(top)
        self.T2_read.place(relx=0.452, rely=0.228, relheight=0.052
                , relwidth=0.107)
        self.T2_read.configure(background="white")
        self.T2_read.configure(font="TkTextFont")
        self.T2_read.configure(foreground="black")
        self.T2_read.configure(highlightbackground="#d9d9d9")
        self.T2_read.configure(highlightcolor="black")
        self.T2_read.configure(insertbackground="black")
        self.T2_read.configure(selectbackground="#c4c4c4")
        self.T2_read.configure(selectforeground="black")
        self.T2_read.configure(wrap="word")

        self.T2_set = tk.Text(top)
        self.T2_set.place(relx=0.585, rely=0.228, relheight=0.052
                , relwidth=0.107)
        self.T2_set.configure(background="white")
        self.T2_set.configure(font="TkTextFont")
        self.T2_set.configure(foreground="black")
        self.T2_set.configure(highlightbackground="#d9d9d9")
        self.T2_set.configure(highlightcolor="black")
        self.T2_set.configure(insertbackground="black")
        self.T2_set.configure(selectbackground="#c4c4c4")
        self.T2_set.configure(selectforeground="black")
        self.T2_set.configure(wrap="word")

        self.T3_read = tk.Text(top)
        self.T3_read.place(relx=0.452, rely=0.296, relheight=0.052
                , relwidth=0.107)
        self.T3_read.configure(background="white")
        self.T3_read.configure(font="TkTextFont")
        self.T3_read.configure(foreground="black")
        self.T3_read.configure(highlightbackground="#d9d9d9")
        self.T3_read.configure(highlightcolor="black")
        self.T3_read.configure(insertbackground="black")
        self.T3_read.configure(selectbackground="#c4c4c4")
        self.T3_read.configure(selectforeground="black")
        self.T3_read.configure(wrap="word")

        self.T3_set = tk.Text(top)
        self.T3_set.place(relx=0.585, rely=0.296, relheight=0.052
                , relwidth=0.107)
        self.T3_set.configure(background="white")
        self.T3_set.configure(font="TkTextFont")
        self.T3_set.configure(foreground="black")
        self.T3_set.configure(highlightbackground="#d9d9d9")
        self.T3_set.configure(highlightcolor="black")
        self.T3_set.configure(insertbackground="black")
        self.T3_set.configure(selectbackground="#c4c4c4")
        self.T3_set.configure(selectforeground="black")
        self.T3_set.configure(wrap="word")

        self.SetT2 = tk.Button(top)
        self.SetT2.place(relx=0.719, rely=0.228, height=24, width=40)
        self.SetT2.configure(activebackground="#ececec")
        self.SetT2.configure(activeforeground="#000000")
        self.SetT2.configure(background="#5f5f5f")
        self.SetT2.configure(command=Cell_control2_support.SetT2)
        self.SetT2.configure(disabledforeground="#a3a3a3")
        self.SetT2.configure(foreground="#000000")
        self.SetT2.configure(highlightbackground="#d9d9d9")
        self.SetT2.configure(highlightcolor="black")
        self.SetT2.configure(pady="0")
        self.SetT2.configure(text='''set''')

        self.SetT3 = tk.Button(top)
        self.SetT3.place(relx=0.719, rely=0.296, height=24, width=40)
        self.SetT3.configure(activebackground="#ececec")
        self.SetT3.configure(activeforeground="#000000")
        self.SetT3.configure(background="#5f5f5f")
        self.SetT3.configure(command=Cell_control2_support.SetT3)
        self.SetT3.configure(disabledforeground="#a3a3a3")
        self.SetT3.configure(foreground="#000000")
        self.SetT3.configure(highlightbackground="#d9d9d9")
        self.SetT3.configure(highlightcolor="black")
        self.SetT3.configure(pady="0")
        self.SetT3.configure(text='''set''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.1, rely=0.235, relwidth=0.217)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.05, rely=0.569, height=21, width=105)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Growth Programm''')

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.067, rely=0.524, relwidth=0.903)

        self.GrowthDisplay = ScrolledText(top)
        self.GrowthDisplay.place(relx=0.067, rely=0.661, relheight=0.298
                , relwidth=0.62)
        self.GrowthDisplay.configure(background="white")
        self.GrowthDisplay.configure(font="TkTextFont")
        self.GrowthDisplay.configure(foreground="black")
        self.GrowthDisplay.configure(highlightbackground="#d9d9d9")
        self.GrowthDisplay.configure(highlightcolor="black")
        self.GrowthDisplay.configure(insertbackground="black")
        self.GrowthDisplay.configure(insertborderwidth="3")
        self.GrowthDisplay.configure(selectbackground="#c4c4c4")
        self.GrowthDisplay.configure(selectforeground="black")
        self.GrowthDisplay.configure(wrap="none")

        self.Growthpath = tk.Text(top)
        self.Growthpath.place(relx=0.268, rely=0.569, relheight=0.055
                , relwidth=0.274)
        self.Growthpath.configure(background="white")
        self.Growthpath.configure(font="TkTextFont")
        self.Growthpath.configure(foreground="black")
        self.Growthpath.configure(highlightbackground="#d9d9d9")
        self.Growthpath.configure(highlightcolor="black")
        self.Growthpath.configure(insertbackground="black")
        self.Growthpath.configure(selectbackground="#c4c4c4")
        self.Growthpath.configure(selectforeground="black")
        self.Growthpath.configure(wrap="word")

        self.getGrowthpath = tk.Button(top)
        self.getGrowthpath.place(relx=0.569, rely=0.569, height=24, width=50)
        self.getGrowthpath.configure(activebackground="#ececec")
        self.getGrowthpath.configure(activeforeground="#000000")
        self.getGrowthpath.configure(background="#5f5f5f")
        self.getGrowthpath.configure(command=Cell_control2_support.getPath)
        self.getGrowthpath.configure(disabledforeground="#a3a3a3")
        self.getGrowthpath.configure(foreground="#000000")
        self.getGrowthpath.configure(highlightbackground="#d9d9d9")
        self.getGrowthpath.configure(highlightcolor="black")
        self.getGrowthpath.configure(pady="0")
        self.getGrowthpath.configure(text='''path''')

        self.LoadProg = tk.Button(top)
        self.LoadProg.place(relx=0.669, rely=0.569, height=24, width=50)
        self.LoadProg.configure(activebackground="#ececec")
        self.LoadProg.configure(activeforeground="#000000")
        self.LoadProg.configure(background="#5f5f5f")
        self.LoadProg.configure(command=Cell_control2_support.LoadProgram)
        self.LoadProg.configure(disabledforeground="#a3a3a3")
        self.LoadProg.configure(foreground="#000000")
        self.LoadProg.configure(highlightbackground="#d9d9d9")
        self.LoadProg.configure(highlightcolor="black")
        self.LoadProg.configure(pady="0")
        self.LoadProg.configure(text='''load''')

        self.Rungrowth = tk.Button(top)
        self.Rungrowth.place(relx=0.702, rely=0.661, height=24, width=50)
        self.Rungrowth.configure(activebackground="#ececec")
        self.Rungrowth.configure(activeforeground="#000000")
        self.Rungrowth.configure(background="#5f5f5f")
        self.Rungrowth.configure(command=Cell_control2_support.RunProgram)
        self.Rungrowth.configure(disabledforeground="#a3a3a3")
        self.Rungrowth.configure(foreground="#000000")
        self.Rungrowth.configure(highlightbackground="#d9d9d9")
        self.Rungrowth.configure(highlightcolor="black")
        self.Rungrowth.configure(pady="0")
        self.Rungrowth.configure(text='''run''')

        self.pauseProg = tk.Button(top)
        self.pauseProg.place(relx=0.702, rely=0.729, height=24, width=50)
        self.pauseProg.configure(activebackground="#ececec")
        self.pauseProg.configure(activeforeground="#000000")
        self.pauseProg.configure(background="#5f5f5f")
        self.pauseProg.configure(command=Cell_control2_support.PauseProgram)
        self.pauseProg.configure(disabledforeground="#a3a3a3")
        self.pauseProg.configure(foreground="#000000")
        self.pauseProg.configure(highlightbackground="#d9d9d9")
        self.pauseProg.configure(highlightcolor="black")
        self.pauseProg.configure(pady="0")
        self.pauseProg.configure(text='''pause''')

        self.AbortProg = tk.Button(top)
        self.AbortProg.place(relx=0.702, rely=0.797, height=24, width=50)
        self.AbortProg.configure(activebackground="#ececec")
        self.AbortProg.configure(activeforeground="#000000")
        self.AbortProg.configure(background="#5f5f5f")
        self.AbortProg.configure(command=Cell_control2_support.AbortProgram)
        self.AbortProg.configure(disabledforeground="#a3a3a3")
        self.AbortProg.configure(foreground="#000000")
        self.AbortProg.configure(highlightbackground="#d9d9d9")
        self.AbortProg.configure(highlightcolor="black")
        self.AbortProg.configure(pady="0")
        self.AbortProg.configure(text='''abort''')

        self.Menu = tk.Button(top)
        self.Menu.place(relx=0.836, rely=0.911, height=34, width=90)
        self.Menu.configure(activebackground="#ececec")
        self.Menu.configure(activeforeground="#000000")
        self.Menu.configure(background="#5f5f5f")
        self.Menu.configure(command=Cell_control2_support.CallMenu)
        self.Menu.configure(disabledforeground="#a3a3a3")
        self.Menu.configure(foreground="#000000")
        self.Menu.configure(highlightbackground="#d9d9d9")
        self.Menu.configure(highlightcolor="black")
        self.Menu.configure(pady="0")
        self.Menu.configure(text='''Menu''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.318, rely=0.159, height=21, width=33)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''open''')

        self.Label4_13 = tk.Label(top)
        self.Label4_13.place(relx=0.318, rely=0.273, height=21, width=33)
        self.Label4_13.configure(activebackground="#f9f9f9")
        self.Label4_13.configure(activeforeground="black")
        self.Label4_13.configure(background="#d9d9d9")
        self.Label4_13.configure(disabledforeground="#a3a3a3")
        self.Label4_13.configure(foreground="#000000")
        self.Label4_13.configure(highlightbackground="#d9d9d9")
        self.Label4_13.configure(highlightcolor="black")
        self.Label4_13.configure(text='''closed''')

        self.Statuschecker = tk.Button(top)
        self.Statuschecker.place(relx=0.953, rely=0.023, height=24, width=20)
        self.Statuschecker.configure(activebackground="#ececec")
        self.Statuschecker.configure(activeforeground="#000000")
        self.Statuschecker.configure(background="#5f5f5f")
        self.Statuschecker.configure(command=Cell_control2_support.CheckStatus)
        self.Statuschecker.configure(disabledforeground="#a3a3a3")
        self.Statuschecker.configure(foreground="#000000")
        self.Statuschecker.configure(highlightbackground="#d9d9d9")
        self.Statuschecker.configure(highlightcolor="black")
        self.Statuschecker.configure(pady="0")
        self.Statuschecker.configure(text='''<>''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.Statuschecker, tooltip_font, '''check status of connections''', delay=0.5)

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.818, rely=0.023, height=20, width=37)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Status''')

        self.smallStatus = tk.Label(top)
        self.smallStatus.place(relx=0.883, rely=0.023, height=20, width=38)
        self.smallStatus.configure(activebackground="#f9f9f9")
        self.smallStatus.configure(activeforeground="black")
        self.smallStatus.configure(background="#d9d9d9")
        self.smallStatus.configure(disabledforeground="#a3a3a3")
        self.smallStatus.configure(foreground="#000000")
        self.smallStatus.configure(highlightbackground="#d9d9d9")
        self.smallStatus.configure(highlightcolor="black")
        self.smallStatus.configure(text='''ok''')

        self.S2_angleselect = ttk.Combobox(top)
        self.S2_angleselect.place(relx=0.117, rely=0.369, relheight=0.048
                , relwidth=0.089)
        self.S2_angleselect.configure(textvariable=Cell_control2_support.shutterAngle)
        self.S2_angleselect.configure(takefocus="")

        self.T4_read = tk.Text(top)
        self.T4_read.place(relx=0.452, rely=0.364, relheight=0.052
                , relwidth=0.107)
        self.T4_read.configure(background="white")
        self.T4_read.configure(font="TkTextFont")
        self.T4_read.configure(foreground="black")
        self.T4_read.configure(highlightbackground="#d9d9d9")
        self.T4_read.configure(highlightcolor="black")
        self.T4_read.configure(insertbackground="black")
        self.T4_read.configure(selectbackground="#c4c4c4")
        self.T4_read.configure(selectforeground="black")
        self.T4_read.configure(wrap="word")

        self.T4_set = tk.Text(top)
        self.T4_set.place(relx=0.585, rely=0.364, relheight=0.052
                , relwidth=0.107)
        self.T4_set.configure(background="white")
        self.T4_set.configure(font="TkTextFont")
        self.T4_set.configure(foreground="black")
        self.T4_set.configure(highlightbackground="#d9d9d9")
        self.T4_set.configure(highlightcolor="black")
        self.T4_set.configure(insertbackground="black")
        self.T4_set.configure(selectbackground="#c4c4c4")
        self.T4_set.configure(selectforeground="black")
        self.T4_set.configure(wrap="word")

        self.SetT4 = tk.Button(top)
        self.SetT4.place(relx=0.719, rely=0.364, height=24, width=40)
        self.SetT4.configure(activebackground="#ececec")
        self.SetT4.configure(activeforeground="#000000")
        self.SetT4.configure(background="#5f5f5f")
        self.SetT4.configure(command=Cell_control2_support.SetT4)
        self.SetT4.configure(disabledforeground="#a3a3a3")
        self.SetT4.configure(foreground="#000000")
        self.SetT4.configure(highlightbackground="#d9d9d9")
        self.SetT4.configure(highlightcolor="black")
        self.SetT4.configure(pady="0")
        self.SetT4.configure(text='''set''')

        self.T_rampSpeed = tk.Text(top)
        self.T_rampSpeed.place(relx=0.301, rely=0.456, relheight=0.052
                , relwidth=0.074)
        self.T_rampSpeed.configure(background="white")
        self.T_rampSpeed.configure(font="TkTextFont")
        self.T_rampSpeed.configure(foreground="black")
        self.T_rampSpeed.configure(highlightbackground="#d9d9d9")
        self.T_rampSpeed.configure(highlightcolor="black")
        self.T_rampSpeed.configure(insertbackground="black")
        self.T_rampSpeed.configure(selectbackground="#c4c4c4")
        self.T_rampSpeed.configure(selectforeground="black")
        self.T_rampSpeed.configure(wrap="word")

        self.RampT1 = tk.Button(top)
        self.RampT1.place(relx=0.786, rely=0.159, height=24, width=40)
        self.RampT1.configure(activebackground="#ececec")
        self.RampT1.configure(activeforeground="#000000")
        self.RampT1.configure(background="#5f5f5f")
        self.RampT1.configure(command=Cell_control2_support.RampT1)
        self.RampT1.configure(disabledforeground="#a3a3a3")
        self.RampT1.configure(foreground="#000000")
        self.RampT1.configure(highlightbackground="#d9d9d9")
        self.RampT1.configure(highlightcolor="black")
        self.RampT1.configure(pady="0")
        self.RampT1.configure(text='''ramp''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.RampT1, tooltip_font, '''Will ramp the temperature with predefined speed''', delay=0.5)

        self.RampT2 = tk.Button(top)
        self.RampT2.place(relx=0.786, rely=0.228, height=24, width=40)
        self.RampT2.configure(activebackground="#ececec")
        self.RampT2.configure(activeforeground="#000000")
        self.RampT2.configure(background="#5f5f5f")
        self.RampT2.configure(command=Cell_control2_support.RampT2)
        self.RampT2.configure(disabledforeground="#a3a3a3")
        self.RampT2.configure(foreground="#000000")
        self.RampT2.configure(highlightbackground="#d9d9d9")
        self.RampT2.configure(highlightcolor="black")
        self.RampT2.configure(pady="0")
        self.RampT2.configure(text='''ramp''')

        self.RampT3 = tk.Button(top)
        self.RampT3.place(relx=0.786, rely=0.296, height=24, width=40)
        self.RampT3.configure(activebackground="#ececec")
        self.RampT3.configure(activeforeground="#000000")
        self.RampT3.configure(background="#5f5f5f")
        self.RampT3.configure(command=Cell_control2_support.RampT3)
        self.RampT3.configure(disabledforeground="#a3a3a3")
        self.RampT3.configure(foreground="#000000")
        self.RampT3.configure(highlightbackground="#d9d9d9")
        self.RampT3.configure(highlightcolor="black")
        self.RampT3.configure(pady="0")
        self.RampT3.configure(text='''ramp''')

        self.RampT4 = tk.Button(top)
        self.RampT4.place(relx=0.786, rely=0.364, height=24, width=40)
        self.RampT4.configure(activebackground="#ececec")
        self.RampT4.configure(activeforeground="#000000")
        self.RampT4.configure(background="#5f5f5f")
        self.RampT4.configure(command=Cell_control2_support.RampT4)
        self.RampT4.configure(disabledforeground="#a3a3a3")
        self.RampT4.configure(foreground="#000000")
        self.RampT4.configure(highlightbackground="#d9d9d9")
        self.RampT4.configure(highlightcolor="black")
        self.RampT4.configure(pady="0")
        self.RampT4.configure(text='''ramp''')

        self.Label5_8 = tk.Label(top)
        self.Label5_8.place(relx=0.217, rely=0.456, height=20, width=48)
        self.Label5_8.configure(activebackground="#f9f9f9")
        self.Label5_8.configure(activeforeground="black")
        self.Label5_8.configure(background="#d9d9d9")
        self.Label5_8.configure(disabledforeground="#a3a3a3")
        self.Label5_8.configure(foreground="#000000")
        self.Label5_8.configure(highlightbackground="#d9d9d9")
        self.Label5_8.configure(highlightcolor="black")
        self.Label5_8.configure(text='''v ramp:''')

        self.BEP_cellSelect = ttk.Combobox(top)
        self.BEP_cellSelect.place(relx=0.452, rely=0.456, relheight=0.048
                , relwidth=0.09)
        self.BEP_cellSelect.configure(textvariable=Cell_control2_support.whichcell)
        self.BEP_cellSelect.configure(takefocus="")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.BEP_cellSelect, tooltip_font, '''select cell to measue bep for''', delay=0.5)

        self.Label4_10 = tk.Label(top)
        self.Label4_10.place(relx=0.385, rely=0.456, height=21, width=33)
        self.Label4_10.configure(activebackground="#f9f9f9")
        self.Label4_10.configure(activeforeground="black")
        self.Label4_10.configure(background="#d9d9d9")
        self.Label4_10.configure(disabledforeground="#a3a3a3")
        self.Label4_10.configure(foreground="#000000")
        self.Label4_10.configure(highlightbackground="#d9d9d9")
        self.Label4_10.configure(highlightcolor="black")
        self.Label4_10.configure(text='''cell''')

        self.BEPdisp1 = tk.Text(top)
        self.BEPdisp1.place(relx=0.87, rely=0.159, relheight=0.052
                , relwidth=0.09)
        self.BEPdisp1.configure(background="white")
        self.BEPdisp1.configure(font="TkTextFont")
        self.BEPdisp1.configure(foreground="black")
        self.BEPdisp1.configure(highlightbackground="#d9d9d9")
        self.BEPdisp1.configure(highlightcolor="black")
        self.BEPdisp1.configure(insertbackground="black")
        self.BEPdisp1.configure(selectbackground="#c4c4c4")
        self.BEPdisp1.configure(selectforeground="black")
        self.BEPdisp1.configure(wrap="word")

        self.Label2_8 = tk.Label(top)
        self.Label2_8.place(relx=0.853, rely=0.091, height=20, width=39)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''BEP''')

        self.MeasureBEP = tk.Button(top)
        self.MeasureBEP.place(relx=0.552, rely=0.456, height=24, width=60)
        self.MeasureBEP.configure(activebackground="#ececec")
        self.MeasureBEP.configure(activeforeground="#000000")
        self.MeasureBEP.configure(background="#5f5f5f")
        self.MeasureBEP.configure(command=Cell_control2_support.MeasureBEP)
        self.MeasureBEP.configure(disabledforeground="#a3a3a3")
        self.MeasureBEP.configure(foreground="#000000")
        self.MeasureBEP.configure(highlightbackground="#d9d9d9")
        self.MeasureBEP.configure(highlightcolor="black")
        self.MeasureBEP.configure(pady="0")
        self.MeasureBEP.configure(text='''measure''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.MeasureBEP, tooltip_font, '''measure BEP, instructions for timing will appear on the right''', delay=0.5)

        self.BEPdisp2 = tk.Text(top)
        self.BEPdisp2.place(relx=0.87, rely=0.228, relheight=0.052
                , relwidth=0.09)
        self.BEPdisp2.configure(background="white")
        self.BEPdisp2.configure(cursor="fleur")
        self.BEPdisp2.configure(font="TkTextFont")
        self.BEPdisp2.configure(foreground="black")
        self.BEPdisp2.configure(highlightbackground="#d9d9d9")
        self.BEPdisp2.configure(highlightcolor="black")
        self.BEPdisp2.configure(insertbackground="black")
        self.BEPdisp2.configure(selectbackground="#c4c4c4")
        self.BEPdisp2.configure(selectforeground="black")
        self.BEPdisp2.configure(wrap="word")

        self.BEPdisp3 = tk.Text(top)
        self.BEPdisp3.place(relx=0.87, rely=0.296, relheight=0.052
                , relwidth=0.09)
        self.BEPdisp3.configure(background="white")
        self.BEPdisp3.configure(font="TkTextFont")
        self.BEPdisp3.configure(foreground="black")
        self.BEPdisp3.configure(highlightbackground="#d9d9d9")
        self.BEPdisp3.configure(highlightcolor="black")
        self.BEPdisp3.configure(insertbackground="black")
        self.BEPdisp3.configure(selectbackground="#c4c4c4")
        self.BEPdisp3.configure(selectforeground="black")
        self.BEPdisp3.configure(wrap="word")

        self.BEPdisp4 = tk.Text(top)
        self.BEPdisp4.place(relx=0.87, rely=0.364, relheight=0.052
                , relwidth=0.09)
        self.BEPdisp4.configure(background="white")
        self.BEPdisp4.configure(font="TkTextFont")
        self.BEPdisp4.configure(foreground="black")
        self.BEPdisp4.configure(highlightbackground="#d9d9d9")
        self.BEPdisp4.configure(highlightcolor="black")
        self.BEPdisp4.configure(insertbackground="black")
        self.BEPdisp4.configure(selectbackground="#c4c4c4")
        self.BEPdisp4.configure(selectforeground="black")
        self.BEPdisp4.configure(wrap="word")

        self.Label4_11 = tk.Label(top)
        self.Label4_11.place(relx=0.669, rely=0.456, height=21, width=183)
        self.Label4_11.configure(activebackground="#f9f9f9")
        self.Label4_11.configure(activeforeground="black")
        self.Label4_11.configure(background="#d9d9d9")
        self.Label4_11.configure(disabledforeground="#a3a3a3")
        self.Label4_11.configure(foreground="#000000")
        self.Label4_11.configure(highlightbackground="#d9d9d9")
        self.Label4_11.configure(highlightcolor="black")
        self.Label4_11.configure(text='''Commands: wait for instructions''')

        self.Label5_9 = tk.Label(top)
        self.Label5_9.place(relx=0.033, rely=0.456, height=20, width=48)
        self.Label5_9.configure(activebackground="#f9f9f9")
        self.Label5_9.configure(activeforeground="black")
        self.Label5_9.configure(background="#d9d9d9")
        self.Label5_9.configure(disabledforeground="#a3a3a3")
        self.Label5_9.configure(foreground="#000000")
        self.Label5_9.configure(highlightbackground="#d9d9d9")
        self.Label5_9.configure(highlightcolor="black")
        self.Label5_9.configure(text='''s_pos''')

        self.sample_pos_select = ttk.Combobox(top)
        self.sample_pos_select.place(relx=0.117, rely=0.456, relheight=0.048
                , relwidth=0.09)
        self.sample_pos_select.configure(textvariable=Cell_control2_support.sampleposselect)
        self.sample_pos_select.configure(takefocus="")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.sample_pos_select, tooltip_font, '''select cell to measue bep for''', delay=0.5)

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.819, rely=0.547, relheight=0.433)
        self.TSeparator3.configure(orient="vertical")

        self.TSeparator4 = ttk.Separator(top)
        self.TSeparator4.place(relx=0.836, rely=0.866, relwidth=0.134)

        self.Statusheading = tk.Label(top)
        self.Statusheading.place(relx=0.836, rely=0.547, height=21, width=75)
        self.Statusheading.configure(activebackground="#f9f9f9")
        self.Statusheading.configure(activeforeground="black")
        self.Statusheading.configure(background="#d9d9d9")
        self.Statusheading.configure(cursor="fleur")
        self.Statusheading.configure(disabledforeground="#a3a3a3")
        self.Statusheading.configure(font="-family {Segoe UI} -size 14")
        self.Statusheading.configure(foreground="#000000")
        self.Statusheading.configure(highlightbackground="#d9d9d9")
        self.Statusheading.configure(highlightcolor="black")
        self.Statusheading.configure(text='''Status''')

        self.StatusWhat = tk.Label(top)
        self.StatusWhat.place(relx=0.836, rely=0.661, height=21, width=85)
        self.StatusWhat.configure(activebackground="#f9f9f9")
        self.StatusWhat.configure(activeforeground="black")
        self.StatusWhat.configure(background="#d9d9d9")
        self.StatusWhat.configure(disabledforeground="#a3a3a3")
        self.StatusWhat.configure(font="-family {Segoe UI} -size 14")
        self.StatusWhat.configure(foreground="#000000")
        self.StatusWhat.configure(highlightbackground="#d9d9d9")
        self.StatusWhat.configure(highlightcolor="black")
        self.StatusWhat.configure(text='''all closed''')

        self.StatusTime = tk.Label(top)
        self.StatusTime.place(relx=0.836, rely=0.729, height=21, width=75)
        self.StatusTime.configure(activebackground="#f9f9f9")
        self.StatusTime.configure(activeforeground="black")
        self.StatusTime.configure(background="#d9d9d9")
        self.StatusTime.configure(disabledforeground="#a3a3a3")
        self.StatusTime.configure(font="-family {Segoe UI} -size 14")
        self.StatusTime.configure(foreground="#000000")
        self.StatusTime.configure(highlightbackground="#d9d9d9")
        self.StatusTime.configure(highlightcolor="black")
        self.StatusTime.configure(text='''00:00''')

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





