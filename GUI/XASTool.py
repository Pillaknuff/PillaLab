#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 24, 2020 02:29:59 AM CEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import XASTool_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    XASTool_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    XASTool_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("978x739+213+126")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Estart = tk.Entry(top)
        self.Estart.place(relx=0.194, rely=0.041,height=30, relwidth=0.147)
        self.Estart.configure(background="white")
        self.Estart.configure(disabledforeground="#a3a3a3")
        self.Estart.configure(font="TkFixedFont")
        self.Estart.configure(foreground="#000000")
        self.Estart.configure(highlightbackground="#d9d9d9")
        self.Estart.configure(highlightcolor="black")
        self.Estart.configure(insertbackground="black")
        self.Estart.configure(selectbackground="blue")
        self.Estart.configure(selectforeground="white")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.031, rely=0.054, height=21, width=69)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''E start''')

        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(relx=0.02, rely=0.108, height=20, width=71)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''E end''')

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(relx=0.031, rely=0.162, height=20, width=100)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Speed eV/s''')

        self.Eend = tk.Entry(top)
        self.Eend.place(relx=0.194, rely=0.095,height=30, relwidth=0.147)
        self.Eend.configure(background="white")
        self.Eend.configure(disabledforeground="#a3a3a3")
        self.Eend.configure(font="TkFixedFont")
        self.Eend.configure(foreground="#000000")
        self.Eend.configure(highlightbackground="#d9d9d9")
        self.Eend.configure(highlightcolor="black")
        self.Eend.configure(insertbackground="black")
        self.Eend.configure(selectbackground="blue")
        self.Eend.configure(selectforeground="white")

        self.Speed = tk.Entry(top)
        self.Speed.place(relx=0.194, rely=0.149,height=30, relwidth=0.147)
        self.Speed.configure(background="white")
        self.Speed.configure(disabledforeground="#a3a3a3")
        self.Speed.configure(font="TkFixedFont")
        self.Speed.configure(foreground="#000000")
        self.Speed.configure(highlightbackground="#d9d9d9")
        self.Speed.configure(highlightcolor="black")
        self.Speed.configure(insertbackground="black")
        self.Speed.configure(selectbackground="blue")
        self.Speed.configure(selectforeground="white")

        self.runbutton = tk.Button(top)
        self.runbutton.place(relx=0.378, rely=0.041, height=34, width=95)
        self.runbutton.configure(activebackground="#ececec")
        self.runbutton.configure(activeforeground="#000000")
        self.runbutton.configure(background="#5f5f5f")
        self.runbutton.configure(command=XASTool_support.runScan)
        self.runbutton.configure(disabledforeground="#a3a3a3")
        self.runbutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.runbutton.configure(foreground="#000000")
        self.runbutton.configure(highlightbackground="#5f5f5f")
        self.runbutton.configure(highlightcolor="black")
        self.runbutton.configure(pady="0")
        self.runbutton.configure(text='''run''')

        self.stopbutton = tk.Button(top)
        self.stopbutton.place(relx=0.378, rely=0.095, height=34, width=95)
        self.stopbutton.configure(activebackground="#ececec")
        self.stopbutton.configure(activeforeground="#000000")
        self.stopbutton.configure(background="#5f5f5f")
        self.stopbutton.configure(command=XASTool_support.stopScan)
        self.stopbutton.configure(disabledforeground="#a3a3a3")
        self.stopbutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.stopbutton.configure(foreground="#000000")
        self.stopbutton.configure(highlightbackground="#5f5f5f")
        self.stopbutton.configure(highlightcolor="black")
        self.stopbutton.configure(pady="0")
        self.stopbutton.configure(text='''stop''')

        self.cpbutton = tk.Button(top)
        self.cpbutton.place(relx=0.378, rely=0.149, height=34, width=35)
        self.cpbutton.configure(activebackground="#ececec")
        self.cpbutton.configure(activeforeground="#000000")
        self.cpbutton.configure(background="#5f5f5f")
        self.cpbutton.configure(command=XASTool_support.changeToCP)
        self.cpbutton.configure(disabledforeground="#a3a3a3")
        self.cpbutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.cpbutton.configure(foreground="#000000")
        self.cpbutton.configure(highlightbackground="#5f5f5f")
        self.cpbutton.configure(highlightcolor="black")
        self.cpbutton.configure(pady="0")
        self.cpbutton.configure(text='''C+''')

        self.cmbutton = tk.Button(top)
        self.cmbutton.place(relx=0.419, rely=0.149, height=34, width=35)
        self.cmbutton.configure(activebackground="#ececec")
        self.cmbutton.configure(activeforeground="#000000")
        self.cmbutton.configure(background="#5f5f5f")
        self.cmbutton.configure(command=XASTool_support.changeToCM)
        self.cmbutton.configure(disabledforeground="#a3a3a3")
        self.cmbutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.cmbutton.configure(foreground="#000000")
        self.cmbutton.configure(highlightbackground="#5f5f5f")
        self.cmbutton.configure(highlightcolor="black")
        self.cmbutton.configure(pady="0")
        self.cmbutton.configure(text='''C-''')

        self.Displayframe = tk.Frame(top)
        self.Displayframe.place(relx=0.02, rely=0.284, relheight=0.589
                , relwidth=0.956)
        self.Displayframe.configure(relief='groove')
        self.Displayframe.configure(borderwidth="2")
        self.Displayframe.configure(relief="groove")
        self.Displayframe.configure(background="#d9d9d9")
        self.Displayframe.configure(highlightbackground="#d9d9d9")
        self.Displayframe.configure(highlightcolor="black")

        self.Filedisplayer = ScrolledWindow(top)
        self.Filedisplayer.place(relx=0.573, rely=0.014, relheight=0.199
                , relwidth=0.364)
        self.Filedisplayer.configure(background="white")
        self.Filedisplayer.configure(borderwidth="2")
        self.Filedisplayer.configure(highlightbackground="#d9d9d9")
        self.Filedisplayer.configure(highlightcolor="black")
        self.Filedisplayer.configure(insertbackground="black")
        self.Filedisplayer.configure(relief="groove")
        self.Filedisplayer.configure(selectbackground="blue")
        self.Filedisplayer.configure(selectforeground="white")
        self.color = self.Filedisplayer.cget("background")
        self.Filedisplayer_f = tk.Frame(self.Filedisplayer,
                            background=self.color)
        self.Filedisplayer.create_window(0, 0, anchor='nw',
                                           window=self.Filedisplayer_f)

        self.displaybutton = tk.Button(top)
        self.displaybutton.place(relx=0.573, rely=0.23, height=34, width=95)
        self.displaybutton.configure(activebackground="#ececec")
        self.displaybutton.configure(activeforeground="#000000")
        self.displaybutton.configure(background="#5f5f5f")
        self.displaybutton.configure(command=XASTool_support.display)
        self.displaybutton.configure(disabledforeground="#a3a3a3")
        self.displaybutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.displaybutton.configure(foreground="#000000")
        self.displaybutton.configure(highlightbackground="#5f5f5f")
        self.displaybutton.configure(highlightcolor="black")
        self.displaybutton.configure(pady="0")
        self.displaybutton.configure(text='''Display''')

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(relx=0.031, rely=0.217, height=20, width=82)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#d9d9d9")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Filename''')

        self.Filename = tk.Entry(top)
        self.Filename.place(relx=0.194, rely=0.203,height=30, relwidth=0.147)
        self.Filename.configure(background="white")
        self.Filename.configure(disabledforeground="#a3a3a3")
        self.Filename.configure(font="TkFixedFont")
        self.Filename.configure(foreground="#000000")
        self.Filename.configure(highlightbackground="#d9d9d9")
        self.Filename.configure(highlightcolor="black")
        self.Filename.configure(insertbackground="black")
        self.Filename.configure(selectbackground="blue")
        self.Filename.configure(selectforeground="white")

        self.openbutton = tk.Button(top)
        self.openbutton.place(relx=0.378, rely=0.203, height=34, width=95)
        self.openbutton.configure(activebackground="#ececec")
        self.openbutton.configure(activeforeground="#000000")
        self.openbutton.configure(background="#5f5f5f")
        self.openbutton.configure(command=XASTool_support.openFile)
        self.openbutton.configure(disabledforeground="#a3a3a3")
        self.openbutton.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.openbutton.configure(foreground="#000000")
        self.openbutton.configure(highlightbackground="#5f5f5f")
        self.openbutton.configure(highlightcolor="black")
        self.openbutton.configure(pady="0")
        self.openbutton.configure(text='''open''')

        self.runbutton_pmmp = tk.Button(top)
        self.runbutton_pmmp.place(relx=0.481, rely=0.041, height=34, width=75)
        self.runbutton_pmmp.configure(activebackground="#ececec")
        self.runbutton_pmmp.configure(activeforeground="#000000")
        self.runbutton_pmmp.configure(background="#5f5f5f")
        self.runbutton_pmmp.configure(command=XASTool_support.runpmmpScan)
        self.runbutton_pmmp.configure(disabledforeground="#a3a3a3")
        self.runbutton_pmmp.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.runbutton_pmmp.configure(foreground="#000000")
        self.runbutton_pmmp.configure(highlightbackground="#5f5f5f")
        self.runbutton_pmmp.configure(highlightcolor="black")
        self.runbutton_pmmp.configure(pady="0")
        self.runbutton_pmmp.configure(text='''+--+''')

        self.displaybutton_2 = tk.Button(top)
        self.displaybutton_2.place(relx=0.675, rely=0.23, height=34, width=95)
        self.displaybutton_2.configure(activebackground="#ececec")
        self.displaybutton_2.configure(activeforeground="#000000")
        self.displaybutton_2.configure(background="#5f5f5f")
        self.displaybutton_2.configure(command=XASTool_support.updateList)
        self.displaybutton_2.configure(disabledforeground="#a3a3a3")
        self.displaybutton_2.configure(font="-family {Comic Sans MS} -size 14 -weight normal -slant roman -underline 0 -overstrike 0")
        self.displaybutton_2.configure(foreground="#000000")
        self.displaybutton_2.configure(highlightbackground="#5f5f5f")
        self.displaybutton_2.configure(highlightcolor="black")
        self.displaybutton_2.configure(pady="0")
        self.displaybutton_2.configure(text='''Update''')

        self.Toolframe = tk.Frame(top)
        self.Toolframe.place(relx=0.02, rely=0.893, relheight=0.088
                , relwidth=0.956)
        self.Toolframe.configure(relief='groove')
        self.Toolframe.configure(borderwidth="2")
        self.Toolframe.configure(relief="groove")
        self.Toolframe.configure(background="#d9d9d9")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





