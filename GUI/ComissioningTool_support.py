#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Aug 07, 2020 10:09:38 PM CEST  platform: Windows NT

'''
Software used for beamline-comissioning
'''

import sys
import threading
import time

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


running = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def startMainGUI(controlBackend): # main caller
    import ComissioningTool
    global theController, w ,top_level ,root, stepwidgetlist, posfieldlist, readlabellist, readdisplaylist,readdisplaydict, TrajStepList
    theController = controlBackend                                  #tell everybody about statemashine
    top, w = ComissioningTool.create_Toplevel1(theController.root)  # create initial window process
    top.protocol("WM_DELETE_WINDOW", destroy_window)                # define exit behaviour, see bottom of code
    
    # define a few widgetlists
    stepwidgetlist = [w.xstep,w.ystep,w.zstep,w.ustep,w.vstep,w.wstep,w.s1step,w.s2step,w.s3step,w.s4step,w.s5step,w.s6step]
    posfieldlist = [w.xpos,w.ypos,w.zpos,w.upos,w.vpos,w.wpos,w.s1pos,w.s2pos,w.s3pos,w.s4pos,w.s5pos,w.s6pos]
    readlabellist = [w.Readlabel1,w.Readlabel2,w.Readlabel3,w.Readlabel4]
    readdisplaylist = [w.Readdisplay1,w.Readdisplay2,w.Readdisplay3,w.Readdisplay4]
    readdisplaydict = {}
    TrajStepList = [w.Trajstep1,w.Trajstep2,w.Trajstep3]

    # *************** adapt initial layout ******************************************
    for i in range(len(readlabellist)):
        try: 
            myname = theController.settings["comtool.PyTangoReadNames"][i]
            readlabellist[i].configure(text=str(myname))
            readdisplaydict[myname] = readdisplaylist[i]            # use dict here to get correct name allocation reagardless of ordering
        except Exception as e:
            print("Problably some labels in comtool are not defined yet: " + str(e))



    # *************** start continuous reading threads ******************************
    global PositionThread,continuousCurrentRead
    PositionThread = threading.Thread(target=continuousPositionUpdate)
    PositionThread.start()
    CurrentReadThrad = threading.Thread(target=continuousCurrentRead)
    CurrentReadThrad.start()

    
def continuousCurrentRead():
    while running:
        for i in range(len(readdisplaylist)):
            try:
                name = theController.settings["comtool.PyTangoReadNames"][i]
                err,readval = theController.pyTangoInterface.ReadDeviceByName(name)
            except:# Exception as e:
                err = True
                #print(e)

            if not err:
                label = readdisplaydict[name]
                readval =  '{:0.3}'.format(float(readval))
                label.configure(text=str(readval))
            
        time.sleep(theController.settings["comtool.polltime"])

def continuousPositionUpdate():
    while running:
        poslist = grabbAllPositions()
        displayPositionUpdate(poslist)
        time.sleep(theController.settings["comtool.polltime"])

def grabbAllPositions():
    poslist = []
    for motnm in theController.settings["comtool.steppernames"]:
        err,pos,mov = theController.motionModule.get_pos(motnm)
        if not err:
            poslist.append(pos)
        else:
            poslist.append(float('nan'))
    return poslist

def singleMoveCommand(num,polarity):
    #num = motor number in this gui reference, is then transfered to a steppername
    #polarity: simple multiplier, should be +-1 for correctness sake
    try:
        motnm = theController.settings["comtool.steppernames"][num]
        step = stepwidgetlist[num].get()
        step = step.replace(",",".")
        step = float(step)*float(polarity)

        theController.motionModule.go_rel(motnm,step)
    except Exception as e:
        print("Error in movement of commtool: " + str(e))

def TrajectoryMoveCommand(num,step,polarity):
    for i in range(len(theController.settings["comtool.steppernames"])):
        nstep = step*polarity*theController.settings["comtool.trajectoryvecs"][num][i]
        motnm = theController.settings["comtool.steppernames"][i]

        try:
            theController.motionModule.go_rel(motnm,nstep)
        except Exception as e:
            print("Error in Comtool Trajectory Move: " + str(e))




def displayPositionUpdate(pos):
    if len(pos) == len(posfieldlist):
        for label, singlepos in zip(posfieldlist,pos):
            singlepos =  '{:0.3}'.format(float(singlepos))
            label.configure(text=str(singlepos))



# **************** Section for automatizer import *****************
def selectpath():
    try:
        from tkinter import filedialog
    except:
        import tkFileDialog as filedialog
    file_path = filedialog.askopenfilename()
    w.Filepath.delete('0', tk.END)
    w.Filepath.insert('0',file_path)

def loadprogram():
    path = w.Filepath.get()
    text = theController.import_moduleAndText(path,referer='comtool')
    try:
        w.Programtext.delete('1.0', tk.END)
        w.Programtext.insert('1.0',text)
    except Exception as e:
        print("error while writting program code in com-tool: " + str(e))

def pauseprogram():
    theController.pauseProgram(referer='comtool')

def abortprogram():
    theController.stopProgram(referer='comtool')

def runprogram():
    theController.runProgram(referer='comtool')

 # *************** Section for Trajectory movement **************

def T1minus():
    print('ComissioningTool_support.T1minus')
    sys.stdout.flush()
    j = 0
    pol = -1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))

def T1plus():
    print('ComissioningTool_support.T1plus')
    sys.stdout.flush()
    j = 0
    pol = 1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))

def T2minus():
    print('ComissioningTool_support.T2minus')
    sys.stdout.flush()
    j = 1
    pol = -1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))

def T2plus():
    print('ComissioningTool_support.T2plus')
    sys.stdout.flush()
    j = 1
    pol = 1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))

def T3minus():
    print('ComissioningTool_support.T3minus')
    sys.stdout.flush()
    j = 2
    pol = -1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))

def T3plus():
    print('ComissioningTool_support.T3plus')
    sys.stdout.flush()
    j = 2
    pol = 1
    try:
        step = TrajStepList[j].get()
        step = float(step)
        TrajectoryMoveCommand(j,step,pol)
    except Exception as e:
        print("Error in Trajectory converstion or step: " + str(e))


#***************** Section for single movements ************************

def s1minus():
    print('ComissioningTool_support.s1minus')
    sys.stdout.flush()
    singleMoveCommand(6,-1)

def s1plus():
    print('ComissioningTool_support.s1plus')
    sys.stdout.flush()
    singleMoveCommand(6,1)

def s2minus():
    print('ComissioningTool_support.s2minus')
    sys.stdout.flush()
    singleMoveCommand(7,-1)

def s2plus():
    print('ComissioningTool_support.s2plus')
    sys.stdout.flush()
    singleMoveCommand(7,1)

def s3minus():
    print('ComissioningTool_support.s3minus')
    sys.stdout.flush()
    singleMoveCommand(8,-1)

def s3plus():
    print('ComissioningTool_support.s3plus')
    sys.stdout.flush()
    singleMoveCommand(8,1)

def s4minus():
    print('ComissioningTool_support.s4minus')
    sys.stdout.flush()
    singleMoveCommand(9,-1)

def s4plus():
    print('ComissioningTool_support.s4plus')
    sys.stdout.flush()
    singleMoveCommand(9,1)

def s5minus():
    print('ComissioningTool_support.s5minus')
    sys.stdout.flush()
    singleMoveCommand(10,-1)

def s5plus():
    print('ComissioningTool_support.s5plus')
    sys.stdout.flush()
    singleMoveCommand(10,1)

def s6minus():
    print('ComissioningTool_support.s6minus')
    sys.stdout.flush()
    singleMoveCommand(11,-1)

def s6plus():
    print('ComissioningTool_support.s6plus')
    sys.stdout.flush()
    singleMoveCommand(11,1)

def uminus():
    print('ComissioningTool_support.uminus')
    sys.stdout.flush()
    singleMoveCommand(3,-1)

def uplus():
    print('ComissioningTool_support.uplus')
    sys.stdout.flush()
    singleMoveCommand(3,1)

def vminus():
    print('ComissioningTool_support.vminus')
    sys.stdout.flush()
    singleMoveCommand(4,-1)

def vplus():
    print('ComissioningTool_support.vplus')
    sys.stdout.flush()
    singleMoveCommand(4,1)

def wminus():
    print('ComissioningTool_support.wminus')
    sys.stdout.flush()
    singleMoveCommand(5,-1)

def wplus():
    print('ComissioningTool_support.wplus')
    sys.stdout.flush()
    singleMoveCommand(5,1)

def xminus():
    print('ComissioningTool_support.xminus')
    sys.stdout.flush()
    singleMoveCommand(0,-1)

def xplus():
    print('ComissioningTool_support.xplus')
    sys.stdout.flush()
    singleMoveCommand(0,1)

def yminus():
    print('ComissioningTool_support.yminus')
    sys.stdout.flush()
    singleMoveCommand(1,-1)

def yplus():
    print('ComissioningTool_support.yplus')
    sys.stdout.flush()
    singleMoveCommand(1,1)

def zminus():
    print('ComissioningTool_support.zminus')
    sys.stdout.flush()
    singleMoveCommand(2,-1)

def zplus():
    print('ComissioningTool_support.zplus')
    sys.stdout.flush()
    singleMoveCommand(2,1)

def destroy_window():
    # Function which closes the window.
    global top_level, running

    running = False                         # variable used to end position read loop
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import ComissioningTool
    ComissioningTool.vp_start_gui()




