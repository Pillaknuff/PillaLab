#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 23, 2020 11:49:45 PM CEST  platform: Windows NT

import sys
import threading
import h5py
import time
import numpy as np

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


Filefolder = "C:\\Users\\Philipp\\Desktop\\temp\\XAStesting\\"
GroupMask = "Scan_"
FileOpen = False
ScanRunning = False
running = True
treedict = {}

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    ChronThread = threading.Thread(target=chronJobs)
    ChronThread.start()

#***********chronJobSection***************************
def chronJobs():
    while running:
        if FileOpen:
            GroupTree = h5file.keys()
            print(GroupTree)
            FillInTree(GroupTree)
        print("loopin")
        time.sleep(5)

def FillInTree(Tree):
    global treedict
    master = w.Filedisplayer_f
    # for widget in master.winfo_children(): #empty first, if already filled
    #     widget.destroy()

    for key in treedict.keys():
        if not key in Tree:
            treedict[key].Frame1.destroy()

    created = False
    for key in Tree:
        if not key in treedict.keys():
            key = str(key)
            print(key)
            treedict[key] = entryLine(master,key)
            treedict[key].Frame1.grid(sticky='w')
            created = True

    if created:
        treedict[key].Frame1.wait_visibility()
        bbox = master.bbox()
        w.Filedisplayer.configure(scrollregion=bbox)

    print("finishing")





def changeToCM():
    print('XASTool_support.changeToCM')
    sys.stdout.flush()

def changeToCP():
    print('XASTool_support.changeToCP')
    sys.stdout.flush()

def display():
    print('XASTool_support.display')
    sys.stdout.flush()

def openFile():
    
    filename = w.Filename.get()
    if filename == "":
        filename = "ScanFile"

    fullpath = Filefolder + filename + ".h5"

    global FileOpen, h5file
    try:
        h5file = h5py.File(fullpath, 'a')
        FileOpen = True
    except Exception as e:
        FileOpen = False
        print("error while opening hdf5: " + str(e))
    
    return FileOpen


def runScan():
    print('XASTool_support.runScan')
    sys.stdout.flush()
    start,end,speed,valid = getScanParams()

    if not FileOpen:
        openFile()

    if (valid and FileOpen) and not ScanRunning:
        mythread = threading.Thread(target=XASScan, args = (start,end,speed))
        mythread.start()



def runpmmpScan():
    print('XASTool_support.runpmmpScan')
    sys.stdout.flush()

def stopScan():
    print('XASTool_support.stopScan')
    sys.stdout.flush()

def getScanParams():
    start = w.Estart.get()
    end = w.Eend.get()
    speed = w.Speed.get()
    try:
        start = float(start)
        end = float(end)
        speed = float(speed)
        valid = True
    except:
        start = 0
        end = 0
        speed = 0
        valid = False
    return start,end,speed,valid

def destroy_window():
    # Function which closes the window.
    global top_level
    running = False
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import XASTool
    XASTool.vp_start_gui()


#*****************Scanning routines********************************
def XASScan(start,end,speed):
    global ScanRunning
    ScanRunning = True
    energy = np.linspace(start,end,1000)
    Isample = np.random.rand(1000)
    Imesh = np.random.rand(1000)
    SaveData(energy,Isample,Imesh)
    ScanRunning = False

def SaveData(energy,Isample,Imesh):

    i=0
    while True: # create group in loop
        groupname = GroupMask + str(i) 
        try:
            g1 = h5file.create_group(groupname)
            break
        except:
            i+=1

    energyset = g1.create_dataset("E_mono", data=energy)
    Isampleset = g1.create_dataset("I_sample", data=Isample,)
    Imeshset = g1.create_dataset("I_mesh", data=Imesh,)



#****************entry class*********************************
class entryLine:
    def __init__(self,master,name):
        self.chkboxval = tk.StringVar()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()

        self.Frame1 = tk.Frame(master,height=30,width=360)
        #self.Frame1.place(relx=0.2, rely=0.178, relheight=0.078, relwidth=0.375)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")

        self.Label = tk.Label(self.Frame1)
        self.Label.place(relx=0.044, rely=0.286, height=19, width=184)
        self.Label.configure(background="#d9d9d9")
        self.Label.configure(disabledforeground="#a3a3a3")
        self.Label.configure(foreground="#000000")
        self.Label.configure(text=name)

        self.style.map('TCheckbutton',background=[('selected', _bgcolor), ('active', _ana2color)])
        self.Checked = ttk.Checkbutton(self.Frame1)
        self.Checked.place(relx=0.889, rely=0.286, relwidth=0.093, relheight=0.0, height=21)
        self.Checked.configure(variable=self.chkboxval)
        self.Checked.configure(takefocus="")
        self.Checked.configure(cursor="fleur")

