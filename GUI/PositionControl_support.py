#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 06, 2020 07:29:14 PM CET  platform: Windows NT

import sys
import threading

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def call_mappingmenu():
    print('PositionControl_support.call_mappingmenu')
    sys.stdout.flush()



# functions for relative movement****************************************************************
def xminus_increment():
    print('PositionControl_support.xminus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dx.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = -float(whereto)
    except:
        w.dx.delete('1.0', tk.END)
        w.dx.insert('1.0','1')
        whereto = 0

    whichaxis = 0
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("xminus terminated")

def xplus_increment():
    print('PositionControl_support.xplus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dx.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dx.delete('1.0', tk.END)
        w.dx.insert('1.0','1')
        whereto = 0
    

    whichaxis = 0
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("xplus terminated")

def yminus_increment():
    print('PositionControl_support.yminus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dy.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = -float(whereto)
    except:
        w.dy.delete('1.0', tk.END)
        w.dy.insert('1.0','1')
        whereto = 0

    whichaxis = 1
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("yminus terminated")

def yplus_increment():
    print('PositionControl_support.yplus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dy.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dy.delete('1.0', tk.END)
        w.dy.insert('1.0','1')
        whereto = 0
    

    whichaxis = 1
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("yplus terminated")

def zminus_increment():
    print('PositionControl_support.zminus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dz.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = -float(whereto)
    except:
        w.dz.delete('1.0', tk.END)
        w.dz.insert('1.0','1')
        whereto = 0

    whichaxis = 2
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("zminus terminated")

def zplus_increment():
    print('PositionControl_support.zplus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dz.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dz.delete('1.0', tk.END)
        w.dz.insert('1.0','1')
        whereto = 0
    

    whichaxis = 2
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("zplus terminated")

def thetaminus_increment():
    print('PositionControl_support.thetaminus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dtheta.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = -float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0

    whichaxis = 3
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("thetaminus terminated")

def thetaplus_increment():
    print('PositionControl_support.thetaplus_increment')
    sys.stdout.flush()
    try:
        whereto = w.dtheta.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0
    

    whichaxis = 3
    theController.singleAxisMoveRelative(whereto,whichaxis)
    #print("thetaplus terminated")

#***************************************************absolute Movements
def stop_motors():
    theController.stop_motors()
def go_x():
    try:
        
        whereto = w.xdesired.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0

    whichaxis = 0
    theController.singleAxisMoveAbsolute(whereto,whichaxis)

def go_y():
    try:
        whereto = w.ydesired.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0

    whichaxis = 1
    theController.singleAxisMoveAbsolute(whereto,whichaxis)

def go_z():
    try:
        whereto = w.zdesired.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0

    whichaxis = 2
    theController.singleAxisMoveAbsolute(whereto,whichaxis)

def go_theta():
    try:
        whereto = w.thetadesired.get('1.0',tk.END) #grab text
        whereto = whereto.replace(",",".")
        whereto = float(whereto)
    except:
        w.dtheta.delete('1.0', tk.END)
        w.dtheta.insert('1.0','1')
        whereto = 0

    whichaxis = 3
    theController.singleAxisMoveAbsolute(whereto,whichaxis)


def go_all():
    go_x()
    go_y()
    go_z()
    go_theta()

def traj_plus():
    xplus_increment()
    yplus_increment()
    zplus_increment()
    thetaplus_increment()

def traj_minus():
    xminus_increment()
    yminus_increment()
    zminus_increment()
    thetaminus_increment()

def positionUpdate(vec):
    classvec = [w.xPos,w.yPos,w.zPos,w.thetaPos]
    for i in range(len(classvec)):
        field = classvec[i]
        if i < len(vec):
            pos = "{:.5f}".format(vec[i])
        else:
            pos = "nan"
        field.delete('1.0',tk.END)
        field.insert('1.0',pos)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


#after all: the caller
def startMainGUI(controlBackend): # main caller
    import PositionControl
    global theController, w ,top_level ,root
    theController= controlBackend #tell everybody about statemashine
    top, w = PositionControl.create_Toplevel1(theController.root)
    
    #call continuous update
    PollThread = threading.Thread(target=theController.continuous_PositionPoll)
    PollThread.start()
    

    


if __name__ == '__main__':
    import PositionControl
    PositionControl.vp_start_gui()




