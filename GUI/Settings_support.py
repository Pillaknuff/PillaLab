#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 23, 2020 10:04:50 PM CET  platform: Windows NT

import sys
import numpy as np
from functools import partial
from distutils import util

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import serial


dic = {}
widgetdict = {}

def startMainGUI(controlBackend): # main caller
    import Settings
    global theController, w ,top_level ,root, dic
    theController= controlBackend #tell everybody about statemashine
    dic = theController.settings
    top_level,w = Settings.create_Toplevel1(theController.root)
    FillInDict()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def updateDict(key,widget):
    global dic
    dic[key], Err = widget.get()
    if not Err:
        theController.updateSetting(key,dic[key])
    print(dic)

def loaddefault():  #load default settings ready to overwrite changes
    global dic
    dic = theController.getDefaultSettings()
    FillInDict()


def set_all():
    print("Setting new values")
    for key in dic.keys():
        ret,err = widgetdict[key].get()
        if not err:
            dic[key] = ret
    theController.updateSettings(dic)
    print(theController.settings)

def FillInDict():
    print("Filling Settings Dict")
    inner_frame = w.Scrolledwindow1_f  # Rename for convenience.
    for widget in inner_frame.winfo_children(): #empty first, if already filled
        widget.destroy()

    strip = {}
    keys = dic.keys()
    l = len(keys)
    nums = np.arange(l)
    for key in keys:
        strip[key] = Frameframe(inner_frame)
        strip[key].Frameframe.grid(sticky='w')
        fr = strip[key].Showframe
        Entryfield = anEntryWidget(dic[key],fr)
        widgetdict[key] = Entryfield
        strip[key].Button1.configure(command=partial(updateDict,key,Entryfield))
        strip[key].Labelalias.configure(text=key)
    strip[key].Frameframe.wait_visibility()
    bbox = inner_frame.bbox()
    w.Scrolledwindow1.configure(scrollregion=bbox)    # Configure scrolling.


class anEntryWidget:
    def __init__(self,val,master):
        self.numbers = [type(int(1)),type(float(1))]
        self.texts = [type("")]
        self.type = type(val)
        self.val = val
        self.field = tk.Entry(master)
        self.field.pack(fill='both')
        self.field.insert(0,str(val))
    def get(self):
        Error = False
        ret = self.field.get()
        if type(self.val) == type([1,2]):
            try: self.val = eval(ret)
            except: 
                print("error inserting")
                Error = True
        elif type(self.val) == type(True):
            try:
                self.val = bool(util.strtobool(ret))
            except:
                print("error inserting")
                Error = True
        else:
            try: self.val = type(self.val)(ret)
            except:
                print("error inserting")
                Error = True
        #print(self.val)
        #print(type(self.val))
        return self.val, Error


# def reconfigCanvas(l):
#     w.Scrolledwindow1.configure(height=2000)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Settings
    Settings.vp_start_gui()


class Frameframe:
    def __init__(self,master):
        font9 = "-family {Segoe UI} -size 11"

        self.Frameframe = tk.Frame(master,height=36,width=620)
        #self.Frameframe.place(rely=rely, height=36, relwidth=1)
        self.Frameframe.configure(relief='groove')
        self.Frameframe.configure(borderwidth="2")
        self.Frameframe.configure(relief="groove")
        self.Frameframe.configure(background="#d9d9d9")

        self.Labelalias = tk.Label(self.Frameframe)
        self.Labelalias.place(relx=0.016, rely=0.222, height=16, width=214)
        self.Labelalias.configure(background="#d9d9d9")
        self.Labelalias.configure(disabledforeground="#a3a3a3")
        self.Labelalias.configure(font=font9)
        self.Labelalias.configure(foreground="#000000")
        self.Labelalias.configure(text='''Label''')

        self.Showframe = tk.Frame(self.Frameframe)
        self.Showframe.place(relx=0.39, rely=0.0, relheight=1.0, relwidth=0.48)
        self.Showframe.configure(relief='groove')
        self.Showframe.configure(borderwidth="2")
        self.Showframe.configure(relief="groove")
        self.Showframe.configure(background="#d9d9d9")

        self.Button1 = tk.Button(self.Frameframe)
        self.Button1.place(relx=0.894, rely=0.111, height=24, width=26)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#5f5f5f")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#5f5f5f")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''set''')

        


