#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Mar 10, 2020 01:10:49 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
from matplotlib import pyplot as plt
import matplotlib.animation as animation
import numpy as np
import random
import datetime
import matplotlib.dates as mdates
#import copy

def set_Tk_var():
    global Mccheck,Pcchk,MBEchk,LLchk,Lampchk,Fore1chk,Fore2chk
    Mccheck = tk.IntVar()
    Pcchk = tk.IntVar()
    MBEchk = tk.IntVar()
    LLchk = tk.IntVar()
    Lampchk = tk.IntVar()
    Fore1chk = tk.IntVar()
    Fore2chk = tk.IntVar()

def changeckMc():
    #global Mccheck
    Mccheck.set(True)
    print(Mccheck.get())
    # if Mccheck:
    #     Mccheck = False
    # else:
    #     Mccheck = True

def setPolltime():
    newpoll = w.Entry1.get()#('1.0',tk.END) #grab text
    print(newpoll)
    try:
        newpoll = float(newpoll)
        theController.settings["pressures.readrate"] = newpoll
    except:
        print("invalid polltime")

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    print("hey")
    top_level.destroy()
    top_level = None
    ani._stop = True

if __name__ == '__main__':
    import Pressures_better
    Pressures_better.vp_start_gui()

def startMainGUI(controlBackend): # main caller
    import Pressures_better
    global theController, w ,top_level ,root
    theController= controlBackend #tell everybody about statemashine
    #Pressures_better.vp_start_gui()
    #root = tk.Tk()
    #top_level = root
    top, w = Pressures_better.create_Toplevel1(theController.root)
    embeddGraphics()
    #root.mainloop()

## version of create Toplevel for pressures better that seems to work!!
# def create_Toplevel1(root, *args, **kwargs):
#     '''Starting point when module is imported by another program.'''
#     global w, w_win, rt
#     rt = root
    
#     Pressures_better_support.set_Tk_var()
#     #top = Toplevel1 (w)
#     top = Toplevel1 (root)
#     Pressures_better_support.init(root, top, *args, **kwargs)
#     return (top)
# def on_key_press(event):
#     print("you pressed {}".format(event.key))
#     key_press_handler(event, canvas, toolbar)

def embeddGraphics():
    global fig,subplot,t,canvas,ani, toolbar

    #fig = Figure(figsize=(5, 4), dpi=100)
    fig = plt.figure(num=1,figsize=(5, 4), dpi=100)
    #fig = plt.figure()
    t = np.arange(0, 3, .01)
    subplot = fig.add_subplot(111)
    subplot.plot(t, 2 * np.sin(2 * np.pi * t))


    subplot.set_yscale('log')
    
    #subplot = plt.plot(t, 2 * np.sin(2 * np.pi * t))
    #fig.plot(t, 2 * np.sin(2 * np.pi * t))
    canvas = FigureCanvasTkAgg(fig, master=w.Graphframe)  # A tk.DrawingArea.
    
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    toolbar = NavigationToolbar2Tk(canvas, w.Toolbarframe)
    toolbar.update()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()
    #canvas.mpl_connect("key_press_event", on_key_press)
    ani = animation.FuncAnimation(fig, updateGraphics, interval=(theController.settings["pressures.readrate"]*1000))

def updateGraphics(dummy):
    
    #randnum = random.random()
    #print("hey , trying to update graphics" + str(randnum))
    #subplot.set_xdata(t)
    #subplot.set_ydata(2 * np.sin(random.random() * np.pi * t))
    # subplot.clear()
    # subplot.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M  /%d/%m/%Y'))
    # subplot.xaxis.set_major_locator(mdates.HourLocator(interval=6))
    widgetlist = [w.ckMc,w.ckPc,w.ckMBE,w.ckLL,w.ckLamp,w.ckFore1,w.ckFore2]
    boollist = []
    for widget in widgetlist:
        state = widget.state()
        if ('alternate' in state) or ('selected' in state):
            state = True
        else:
            state = False
        boollist.append(state)
    #boollist = [bool(w.ckMc.state()),bool(Pcchk.get()),bool(MBEchk.get()),bool(LLchk.get()),bool(Lampchk.get()),bool(Fore1chk.get()),bool(Fore2chk.get())]
    namelist = ['Mc','Pc','MBE','LL','Lamp','Fore1','Fore2']
    # print(boollist)
    #plt.figure(1)
    # s = copy.copy( toolbar._views )
    # p = copy.copy( toolbar._positions )

    xlim = subplot.get_xlim()
    ylim = subplot.get_ylim()
    subplot.clear()
    subplot.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M  /%d/%m/%Y'))
    subplot.xaxis.set_major_locator(mdates.HourLocator(interval=6))
    # plt.clear()
    # plt.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M  /%d/%m/%Y'))
    # plt.xaxis.set_major_locator(mdates.HourLocator(interval=6))
    # plt.hold(True)


    for i in range(len(boollist)):
        if boollist[i] and (namelist[i] in theController.settings["pressures.names"]):
            print(namelist[i])
            t,p = theController.getPressureDisplayData(namelist[i])
            t = [datetime.datetime.fromtimestamp(j) for j in t]
            t = [mdates.date2num(j) for j in t]
            # if not theController.Flawless:
            #     print(t)
            #     print(p)
            subplot.plot_date(t, p,label=namelist[i])
    
    

    subplot.autoscale(enable=True,axis='y',tight=True)
    subplot.autoscale(enable=True,axis='x',tight=True)
    #subplot.set_xlim(xlim)
    subplot.set_ylim(ylim)
    subplot.set_yscale('log')
    subplot.legend(loc=0, frameon=False)
    canvas.draw()
    # plt.autoscale(enable=True,axis='y',tight=True)
    # plt.set_yscale('log')
    # plt.legend(loc=0, frameon=False)
    #canvas.draw()
    #subplot.plot(t,p)
    

    



def UpdatePressures(pressures,names):
    for p, n in zip(pressures, names):
        found = True
        if n == "Mc":
            disp = w.Pmcdisp
        elif n == "Pc":
            disp = w.Ppcdisp
        elif n == "LL":
            disp = w.PLLdisp
        elif n == "MBE":
            disp = w.PMBEdisp
        elif n == "Lamp":
            disp = w.PHedisp
        else:
            found = False
         
    #w.Display.delete('1.0',tk.END)
    #print('PressureUpdate')
    #sys.stdout.flush()
        p_str = '{:0.2e}'.format(p)         # god-like badass string formatting to two digits in exponential representation
        if found:
            disp.config(text=p_str)
    #print('beep')
    #updateGraphics()
    #embeddGraphics()



