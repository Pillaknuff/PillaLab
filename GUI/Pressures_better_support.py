#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Mar 10, 2020 01:10:49 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
from matplotlib import pyplot as plt
import matplotlib.animation as animation
import numpy as np
import random
import datetime
import matplotlib.dates as mdates
import threading
import time
#import copy

def set_Tk_var():
    global Mccheck,Pcchk,MBEchk,LLchk,Lampchk,Fore1chk,Fore2chk
    Mccheck = tk.IntVar()
    Pcchk = tk.IntVar()
    MBEchk = tk.IntVar()
    LLchk = tk.IntVar()
    Lampchk = tk.IntVar()
    Fore1chk = tk.IntVar()
    Fore2chk = tk.IntVar()

def changeckMc():
    #global Mccheck
    Mccheck.set(True)
    print(Mccheck.get())
    # if Mccheck:
    #     Mccheck = False
    # else:
    #     Mccheck = True

def setPolltime():
    newpoll = w.Entry1.get()#('1.0',tk.END) #grab text
    print(newpoll)
    try:
        newpoll = float(newpoll)
        theController.settings["pressures.readrate"] = newpoll
    except:
        print("invalid polltime")

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level, PressGUIActive
    print("terminating pressure window")
    PressGUIActive = False
    top_level.destroy()
    top_level = None
    ani._stop = True

if __name__ == '__main__':
    import Pressures_better
    Pressures_better.vp_start_gui()

def startMainGUI(controlBackend):                                                   # main caller
    import Pressures_better
    global theController, w ,top_level ,root, PressGUIActive
    PressGUIActive = True                                                           # Flag used for proper termination of background processes
    theController= controlBackend                                                   # set the controller (backend) as global instance

    top, w = Pressures_better.create_Toplevel1(theController.root)                  # Create the actual window
    embeddGraphics()                                                                # Embedd the graphics and start graphic update background process
    GUIupdateThread = threading.Thread(target=ContinuousGUiUpdate)                  # Create the background process supposely refreshing the GUI
    GUIupdateThread.start()                                                         # Start GUI refresh
    
    #root.mainloop()

## version of create Toplevel for pressures better that seems to work!!
# def create_Toplevel1(root, *args, **kwargs):
#     '''Starting point when module is imported by another program.'''
#     global w, w_win, rt
#     rt = root
    
#     Pressures_better_support.set_Tk_var()
#     #top = Toplevel1 (w)
#     top = Toplevel1 (root)
#     Pressures_better_support.init(root, top, *args, **kwargs)
#     return (top)
# def on_key_press(event):
#     print("you pressed {}".format(event.key))
#     key_press_handler(event, canvas, toolbar)

def embeddGraphics():                                                               # function embedding the Mathplotlib-graphics and starting the background threads
    global fig,subplot,t,canvas,ani, toolbar

    #fig = Figure(figsize=(5, 4), dpi=100)
    fig = plt.figure(num=1,figsize=(5, 4), dpi=100)
    #fig = plt.figure()
    t = np.arange(0, 3, .01)
    subplot = fig.add_subplot(111)
    subplot.plot(t, 2 * np.sin(2 * np.pi * t))


    subplot.set_yscale('log')
    
    #subplot = plt.plot(t, 2 * np.sin(2 * np.pi * t))
    #fig.plot(t, 2 * np.sin(2 * np.pi * t))
    canvas = FigureCanvasTkAgg(fig, master=w.Graphframe)  # A tk.DrawingArea.
    
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    toolbar = NavigationToolbar2Tk(canvas, w.Toolbarframe)
    toolbar.update()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()
    #canvas.mpl_connect("key_press_event", on_key_press)
    ani = animation.FuncAnimation(fig, updateGraphics, interval=(theController.settings["pressures.readrate"]*1000))

def updateGraphics(dummy):
    
    widgetlist = [w.ckMc,w.ckPc,w.ckMBE,w.ckLL,w.ckLamp,w.ckFore1,w.ckFore2]    # List of checkbox widgets indicating data to be plotted
    boollist = []                                                               # read checkboxes, not values here, plot all "Trues"
    for widget in widgetlist:
        state = widget.state()
        if ('alternate' in state) or ('selected' in state):
            state = True
        else:
            state = False
        boollist.append(state)

    namelist = theController.settings["pressures.GUIGraphnames"]                # list of names to the checkboxes

    xlim = subplot.get_xlim()
    ylim = subplot.get_ylim()
    subplot.clear()
    subplot.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M  /%d/%m/%Y'))
    subplot.xaxis.set_major_locator(mdates.HourLocator(interval=6))


    itlength = max([len(boollist),len(namelist)])                               # pre-catch missconfig errors, in which less names configured, than checkboxes!
    for i in range(itlength):
        try:
            if boollist[i] and (namelist[i] in theController.settings["pressures.names"]):
                t,p = theController.getPressureDisplayData(namelist[i])         # get pressure data from ring-buffer
                t = [datetime.datetime.fromtimestamp(j) for j in t]
                t = [mdates.date2num(j) for j in t]                             # two step datetime converstion of the time axis

                subplot.plot_date(t, p,label=namelist[i])                       # plot this pressure entry
        except Exception as e:                                                  # catch missconfig errors
            print("Error in GUI update, probably wront configuration of the name list: " + str(e))
    
    

    subplot.autoscale(enable=True,axis='y',tight=True)
    subplot.autoscale(enable=True,axis='x',tight=True)
    #subplot.set_xlim(xlim)
    subplot.set_ylim(ylim)
    subplot.set_yscale('log')
    subplot.legend(loc=0, frameon=False)
    canvas.draw()
    # plt.autoscale(enable=True,axis='y',tight=True)
    # plt.set_yscale('log')
    # plt.legend(loc=0, frameon=False)
    #canvas.draw()
    #subplot.plot(t,p)
    

    

def ContinuousGUiUpdate():
    while PressGUIActive:
        names,pressures = theController.GetPressures()
        UpdatePressures(pressures,names)
        time.sleep(theController.settings["pressures.displaytime"])

def UpdatePressures(pressures,names):
    for p, n in zip(pressures, names):
        found = True
        if n == "Mc":
            disp = w.Pmcdisp
        elif n == "Pc":
            disp = w.Ppcdisp
        elif n == "LL":
            disp = w.PLLdisp
        elif n == "MBE":
            disp = w.PMBEdisp
        elif n == "Lamp":
            disp = w.PHedisp
        elif n == "Fore1":
            disp = w.PP1disp
        elif n == "Fore2":
            disp = w.PP2disp
        else:
            found = False
         
        p_str = '{:0.2e}'.format(p)                                                 # god-like badass string formatting to two digits in exponential representation
        if found:
            disp.config(text=p_str)




